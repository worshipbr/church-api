// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(120)
  description String   @db.VarChar(255)
  active      Boolean  @default(false)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @map("updated_at")

  users        User[]
  guests       Guest[]
  // notes        Note[]
  departaments Departament[]
  visits       Visit[]
  // agendas      Agenda[]

  @@map("churchs")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(80)
  email     String   @unique @db.VarChar(255)
  password  String?  @db.VarChar(255)
  phone     String?  @db.VarChar(18)
  image     String?  @db.VarChar(255)
  active    Boolean  @default(false)
  churchId  Int?
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  church       Church?             @relation(fields: [churchId], references: [id])
  role         Role                @relation(fields: [roleId], references: [id])
  departaments DepartamentLeader[]

  @@map("users")
}

model Guest {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(80)
  phone         String? @db.VarChar(19)
  churchId      Int
  departamentId Int?
  parentId      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  church      Church       @relation(fields: [churchId], references: [id])
  departament Departament? @relation(fields: [departamentId], references: [id])
  parent      Guest?       @relation("ParentGuest", fields: [parentId], references: [id])
  compenions  Guest[]      @relation("ParentGuest")
  visits      Visit[]

  @@map("guests")
}

model Visit {
  id        Int      @id @default(autoincrement())
  visitDate DateTime @map("visit_date")
  guest     Guest?   @relation(fields: [guestId], references: [id])
  guestId   Int?
  church    Church?  @relation(fields: [churchId], references: [id])
  churchId  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("visits")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(80)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User[]

  @@map("roles")
}

model Departament {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(80)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  guest    Guest[]
  leaders  DepartamentLeader[]
  church   Church?             @relation(fields: [churchId], references: [id])
  churchId Int?

  @@map("departaments")
}

model DepartamentLeader {
  id            Int          @id @default(autoincrement())
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  Departament   Departament? @relation(fields: [departamentId], references: [id])
  departamentId Int?

  @@map("departament_leaders")
}

// model Note {
//   id          Int    @id @default(autoincrement())
//   description String @db.Inet
//   image       String @db.VarChar(255)
//   churchId    Int

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt @map("updated_at")

//   church  Church   @relation(fields: [churchId], references: [id])
//   agendas Agenda[]

//   @@map("notes")
// }

// model Agenda {
//   id   Int      @id @default(autoincrement())
//   date DateTime

//   note     Note?   @relation(fields: [noteId], references: [id])
//   noteId   Int?
//   church   Church? @relation(fields: [churchId], references: [id])
//   churchId Int?

//   @@map("agendas")
// }
