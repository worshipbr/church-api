// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(120)
  description String   @db.VarChar(255)
  active      Boolean  @default(false)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @map("updated_at")

  user      User[]
  guest     Guest[]
  companion Companion[]
  note      Note[]

  @@map("churchs")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(80)
  email     String   @unique @db.VarChar(255)
  password  String?  @db.VarChar(255)
  phone     String?  @db.VarChar(18)
  image     String?  @db.VarChar(255)
  active    Boolean  @default(false)
  churchId  Int?
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  church       Church?             @relation(fields: [churchId], references: [id])
  role         Role                @relation(fields: [roleId], references: [id])
  departaments DepartamentLeader[]
  departement  Departament[]

  @@map("users")
}

model Guest {
  id            Int     @id @default(autoincrement())
  name          String  @db.VarChar(80)
  phone         String? @db.VarChar(19)
  churchId      Int
  departamentId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  church      Church       @relation(fields: [churchId], references: [id])
  departament Departament? @relation(fields: [departamentId], references: [id])
  companion   Companion[]

  @@map("guests")
}

model Companion {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(80)
  churchId Int
  guestId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  church Church @relation(fields: [churchId], references: [id])
  guest  Guest  @relation(fields: [guestId], references: [id])

  @@map("companions")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(80)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User[]

  @@map("roles")
}

model Departament {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(80)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  guest   Guest[]
  leaders DepartamentLeader[]
  users   User[]

  @@map("departaments")
}

model DepartamentLeader {
  id            Int          @id @default(autoincrement())
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  Departament   Departament? @relation(fields: [departamentId], references: [id])
  departamentId Int?

  @@map("departament_leaders")
}

model Note {
  id          Int      @id @default(autoincrement())
  description String   @db.Inet
  image       String   @db.VarChar(255)
  data        DateTime @db.Timestamp()
  churchId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")

  church Church @relation(fields: [churchId], references: [id])

  @@map("notes")
}
